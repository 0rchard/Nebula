// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neb_sys.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "neb_sys.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace neb {

namespace {

const ::google::protobuf::Descriptor* ConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkerLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkerLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetWorker_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceLog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_neb_5fsys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_neb_5fsys_2eproto() {
  protobuf_AddDesc_neb_5fsys_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "neb_sys.proto");
  GOOGLE_CHECK(file != NULL);
  ConfigInfo_descriptor_ = file->message_type(0);
  static const int ConfigInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, file_content_),
  };
  ConfigInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigInfo_descriptor_,
      ConfigInfo::default_instance_,
      ConfigInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConfigInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigInfo, _is_default_instance_));
  WorkerLoad_descriptor_ = file->message_type(1);
  static const int WorkerLoad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, load_),
  };
  WorkerLoad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WorkerLoad_descriptor_,
      WorkerLoad::default_instance_,
      WorkerLoad_offsets_,
      -1,
      -1,
      -1,
      sizeof(WorkerLoad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkerLoad, _is_default_instance_));
  ConnectWorker_descriptor_ = file->message_type(2);
  static const int ConnectWorker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectWorker, worker_index_),
  };
  ConnectWorker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectWorker_descriptor_,
      ConnectWorker::default_instance_,
      ConnectWorker_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectWorker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectWorker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectWorker, _is_default_instance_));
  TargetWorker_descriptor_ = file->message_type(3);
  static const int TargetWorker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, worker_identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, node_type_),
  };
  TargetWorker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TargetWorker_descriptor_,
      TargetWorker::default_instance_,
      TargetWorker_offsets_,
      -1,
      -1,
      -1,
      sizeof(TargetWorker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetWorker, _is_default_instance_));
  LogLevel_descriptor_ = file->message_type(4);
  static const int LogLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLevel, log_level_),
  };
  LogLevel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogLevel_descriptor_,
      LogLevel::default_instance_,
      LogLevel_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogLevel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLevel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogLevel, _is_default_instance_));
  TraceLog_descriptor_ = file->message_type(5);
  static const int TraceLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceLog, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceLog, node_identify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceLog, log_content_),
  };
  TraceLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TraceLog_descriptor_,
      TraceLog::default_instance_,
      TraceLog_offsets_,
      -1,
      -1,
      -1,
      sizeof(TraceLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceLog, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceLog, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_neb_5fsys_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigInfo_descriptor_, &ConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WorkerLoad_descriptor_, &WorkerLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectWorker_descriptor_, &ConnectWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TargetWorker_descriptor_, &TargetWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogLevel_descriptor_, &LogLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TraceLog_descriptor_, &TraceLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_neb_5fsys_2eproto() {
  delete ConfigInfo::default_instance_;
  delete ConfigInfo_reflection_;
  delete WorkerLoad::default_instance_;
  delete WorkerLoad_reflection_;
  delete ConnectWorker::default_instance_;
  delete ConnectWorker_reflection_;
  delete TargetWorker::default_instance_;
  delete TargetWorker_reflection_;
  delete LogLevel::default_instance_;
  delete LogLevel_reflection_;
  delete TraceLog::default_instance_;
  delete TraceLog_reflection_;
}

void protobuf_AddDesc_neb_5fsys_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_neb_5fsys_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rneb_sys.proto\022\003neb\"5\n\nConfigInfo\022\021\n\tfi"
    "le_name\030\001 \001(\t\022\024\n\014file_content\030\002 \001(\t\"\'\n\nW"
    "orkerLoad\022\013\n\003pid\030\001 \001(\005\022\014\n\004load\030\002 \001(\005\"%\n\r"
    "ConnectWorker\022\024\n\014worker_index\030\001 \001(\005\":\n\014T"
    "argetWorker\022\027\n\017worker_identify\030\001 \001(\t\022\021\n\t"
    "node_type\030\002 \001(\t\"\035\n\010LogLevel\022\021\n\tlog_level"
    "\030\001 \001(\005\"G\n\010TraceLog\022\017\n\007node_id\030\001 \001(\r\022\025\n\rn"
    "ode_identify\030\002 \001(\t\022\023\n\013log_content\030\003 \001(\014b"
    "\006proto3", 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "neb_sys.proto", &protobuf_RegisterTypes);
  ConfigInfo::default_instance_ = new ConfigInfo();
  WorkerLoad::default_instance_ = new WorkerLoad();
  ConnectWorker::default_instance_ = new ConnectWorker();
  TargetWorker::default_instance_ = new TargetWorker();
  LogLevel::default_instance_ = new LogLevel();
  TraceLog::default_instance_ = new TraceLog();
  ConfigInfo::default_instance_->InitAsDefaultInstance();
  WorkerLoad::default_instance_->InitAsDefaultInstance();
  ConnectWorker::default_instance_->InitAsDefaultInstance();
  TargetWorker::default_instance_->InitAsDefaultInstance();
  LogLevel::default_instance_->InitAsDefaultInstance();
  TraceLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_neb_5fsys_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_neb_5fsys_2eproto {
  StaticDescriptorInitializer_neb_5fsys_2eproto() {
    protobuf_AddDesc_neb_5fsys_2eproto();
  }
} static_descriptor_initializer_neb_5fsys_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigInfo::kFileNameFieldNumber;
const int ConfigInfo::kFileContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigInfo::ConfigInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.ConfigInfo)
}

void ConfigInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConfigInfo::ConfigInfo(const ConfigInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.ConfigInfo)
}

void ConfigInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConfigInfo::~ConfigInfo() {
  // @@protoc_insertion_point(destructor:neb.ConfigInfo)
  SharedDtor();
}

void ConfigInfo::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigInfo_descriptor_;
}

const ConfigInfo& ConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neb_5fsys_2eproto();
  return *default_instance_;
}

ConfigInfo* ConfigInfo::default_instance_ = NULL;

ConfigInfo* ConfigInfo::New(::google::protobuf::Arena* arena) const {
  ConfigInfo* n = new ConfigInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.ConfigInfo)
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.ConfigInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.ConfigInfo.file_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file_content;
        break;
      }

      // optional string file_content = 2;
      case 2: {
        if (tag == 18) {
         parse_file_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_content().data(), this->file_content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.ConfigInfo.file_content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.ConfigInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.ConfigInfo)
  return false;
#undef DO_
}

void ConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.ConfigInfo)
  // optional string file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.ConfigInfo.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional string file_content = 2;
  if (this->file_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_content().data(), this->file_content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.ConfigInfo.file_content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_content(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.ConfigInfo)
}

::google::protobuf::uint8* ConfigInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.ConfigInfo)
  // optional string file_name = 1;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.ConfigInfo.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional string file_content = 2;
  if (this->file_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_content().data(), this->file_content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.ConfigInfo.file_content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.ConfigInfo)
  return target;
}

int ConfigInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.ConfigInfo)
  int total_size = 0;

  // optional string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // optional string file_content = 2;
  if (this->file_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.ConfigInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.ConfigInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.ConfigInfo)
    MergeFrom(*source);
  }
}

void ConfigInfo::MergeFrom(const ConfigInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.ConfigInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_content().size() > 0) {

    file_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_content_);
  }
}

void ConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.ConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigInfo::CopyFrom(const ConfigInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.ConfigInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigInfo::IsInitialized() const {

  return true;
}

void ConfigInfo::Swap(ConfigInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigInfo::InternalSwap(ConfigInfo* other) {
  file_name_.Swap(&other->file_name_);
  file_content_.Swap(&other->file_content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigInfo_descriptor_;
  metadata.reflection = ConfigInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigInfo

// optional string file_name = 1;
void ConfigInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConfigInfo::file_name() const {
  // @@protoc_insertion_point(field_get:neb.ConfigInfo.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ConfigInfo.file_name)
}
 void ConfigInfo::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ConfigInfo.file_name)
}
 void ConfigInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ConfigInfo.file_name)
}
 ::std::string* ConfigInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.ConfigInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:neb.ConfigInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:neb.ConfigInfo.file_name)
}

// optional string file_content = 2;
void ConfigInfo::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ConfigInfo::file_content() const {
  // @@protoc_insertion_point(field_get:neb.ConfigInfo.file_content)
  return file_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_file_content(const ::std::string& value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ConfigInfo.file_content)
}
 void ConfigInfo::set_file_content(const char* value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ConfigInfo.file_content)
}
 void ConfigInfo::set_file_content(const char* value, size_t size) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ConfigInfo.file_content)
}
 ::std::string* ConfigInfo::mutable_file_content() {
  
  // @@protoc_insertion_point(field_mutable:neb.ConfigInfo.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConfigInfo::release_file_content() {
  // @@protoc_insertion_point(field_release:neb.ConfigInfo.file_content)
  
  return file_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConfigInfo::set_allocated_file_content(::std::string* file_content) {
  if (file_content != NULL) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:neb.ConfigInfo.file_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerLoad::kPidFieldNumber;
const int WorkerLoad::kLoadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerLoad::WorkerLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.WorkerLoad)
}

void WorkerLoad::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WorkerLoad::WorkerLoad(const WorkerLoad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.WorkerLoad)
}

void WorkerLoad::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  pid_ = 0;
  load_ = 0;
}

WorkerLoad::~WorkerLoad() {
  // @@protoc_insertion_point(destructor:neb.WorkerLoad)
  SharedDtor();
}

void WorkerLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorkerLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkerLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkerLoad_descriptor_;
}

const WorkerLoad& WorkerLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neb_5fsys_2eproto();
  return *default_instance_;
}

WorkerLoad* WorkerLoad::default_instance_ = NULL;

WorkerLoad* WorkerLoad::New(::google::protobuf::Arena* arena) const {
  WorkerLoad* n = new WorkerLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkerLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.WorkerLoad)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WorkerLoad, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WorkerLoad*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(pid_, load_);

#undef ZR_HELPER_
#undef ZR_

}

bool WorkerLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.WorkerLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_load;
        break;
      }

      // optional int32 load = 2;
      case 2: {
        if (tag == 16) {
         parse_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &load_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.WorkerLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.WorkerLoad)
  return false;
#undef DO_
}

void WorkerLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.WorkerLoad)
  // optional int32 pid = 1;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional int32 load = 2;
  if (this->load() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->load(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.WorkerLoad)
}

::google::protobuf::uint8* WorkerLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.WorkerLoad)
  // optional int32 pid = 1;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional int32 load = 2;
  if (this->load() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->load(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.WorkerLoad)
  return target;
}

int WorkerLoad::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.WorkerLoad)
  int total_size = 0;

  // optional int32 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pid());
  }

  // optional int32 load = 2;
  if (this->load() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->load());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkerLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.WorkerLoad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WorkerLoad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkerLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.WorkerLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.WorkerLoad)
    MergeFrom(*source);
  }
}

void WorkerLoad::MergeFrom(const WorkerLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.WorkerLoad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.load() != 0) {
    set_load(from.load());
  }
}

void WorkerLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.WorkerLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerLoad::CopyFrom(const WorkerLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.WorkerLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerLoad::IsInitialized() const {

  return true;
}

void WorkerLoad::Swap(WorkerLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerLoad::InternalSwap(WorkerLoad* other) {
  std::swap(pid_, other->pid_);
  std::swap(load_, other->load_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkerLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkerLoad_descriptor_;
  metadata.reflection = WorkerLoad_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkerLoad

// optional int32 pid = 1;
void WorkerLoad::clear_pid() {
  pid_ = 0;
}
 ::google::protobuf::int32 WorkerLoad::pid() const {
  // @@protoc_insertion_point(field_get:neb.WorkerLoad.pid)
  return pid_;
}
 void WorkerLoad::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:neb.WorkerLoad.pid)
}

// optional int32 load = 2;
void WorkerLoad::clear_load() {
  load_ = 0;
}
 ::google::protobuf::int32 WorkerLoad::load() const {
  // @@protoc_insertion_point(field_get:neb.WorkerLoad.load)
  return load_;
}
 void WorkerLoad::set_load(::google::protobuf::int32 value) {
  
  load_ = value;
  // @@protoc_insertion_point(field_set:neb.WorkerLoad.load)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectWorker::kWorkerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectWorker::ConnectWorker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.ConnectWorker)
}

void ConnectWorker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConnectWorker::ConnectWorker(const ConnectWorker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.ConnectWorker)
}

void ConnectWorker::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  worker_index_ = 0;
}

ConnectWorker::~ConnectWorker() {
  // @@protoc_insertion_point(destructor:neb.ConnectWorker)
  SharedDtor();
}

void ConnectWorker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConnectWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectWorker_descriptor_;
}

const ConnectWorker& ConnectWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neb_5fsys_2eproto();
  return *default_instance_;
}

ConnectWorker* ConnectWorker::default_instance_ = NULL;

ConnectWorker* ConnectWorker::New(::google::protobuf::Arena* arena) const {
  ConnectWorker* n = new ConnectWorker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.ConnectWorker)
  worker_index_ = 0;
}

bool ConnectWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.ConnectWorker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 worker_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.ConnectWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.ConnectWorker)
  return false;
#undef DO_
}

void ConnectWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.ConnectWorker)
  // optional int32 worker_index = 1;
  if (this->worker_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->worker_index(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.ConnectWorker)
}

::google::protobuf::uint8* ConnectWorker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.ConnectWorker)
  // optional int32 worker_index = 1;
  if (this->worker_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->worker_index(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.ConnectWorker)
  return target;
}

int ConnectWorker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.ConnectWorker)
  int total_size = 0;

  // optional int32 worker_index = 1;
  if (this->worker_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_index());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectWorker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.ConnectWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConnectWorker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectWorker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.ConnectWorker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.ConnectWorker)
    MergeFrom(*source);
  }
}

void ConnectWorker::MergeFrom(const ConnectWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.ConnectWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.worker_index() != 0) {
    set_worker_index(from.worker_index());
  }
}

void ConnectWorker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.ConnectWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectWorker::CopyFrom(const ConnectWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.ConnectWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectWorker::IsInitialized() const {

  return true;
}

void ConnectWorker::Swap(ConnectWorker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectWorker::InternalSwap(ConnectWorker* other) {
  std::swap(worker_index_, other->worker_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectWorker_descriptor_;
  metadata.reflection = ConnectWorker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectWorker

// optional int32 worker_index = 1;
void ConnectWorker::clear_worker_index() {
  worker_index_ = 0;
}
 ::google::protobuf::int32 ConnectWorker::worker_index() const {
  // @@protoc_insertion_point(field_get:neb.ConnectWorker.worker_index)
  return worker_index_;
}
 void ConnectWorker::set_worker_index(::google::protobuf::int32 value) {
  
  worker_index_ = value;
  // @@protoc_insertion_point(field_set:neb.ConnectWorker.worker_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetWorker::kWorkerIdentifyFieldNumber;
const int TargetWorker::kNodeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetWorker::TargetWorker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.TargetWorker)
}

void TargetWorker::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TargetWorker::TargetWorker(const TargetWorker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.TargetWorker)
}

void TargetWorker::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  worker_identify_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TargetWorker::~TargetWorker() {
  // @@protoc_insertion_point(destructor:neb.TargetWorker)
  SharedDtor();
}

void TargetWorker::SharedDtor() {
  worker_identify_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TargetWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetWorker_descriptor_;
}

const TargetWorker& TargetWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neb_5fsys_2eproto();
  return *default_instance_;
}

TargetWorker* TargetWorker::default_instance_ = NULL;

TargetWorker* TargetWorker::New(::google::protobuf::Arena* arena) const {
  TargetWorker* n = new TargetWorker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.TargetWorker)
  worker_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TargetWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.TargetWorker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string worker_identify = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_worker_identify()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->worker_identify().data(), this->worker_identify().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.TargetWorker.worker_identify"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_type;
        break;
      }

      // optional string node_type = 2;
      case 2: {
        if (tag == 18) {
         parse_node_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_type().data(), this->node_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.TargetWorker.node_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.TargetWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.TargetWorker)
  return false;
#undef DO_
}

void TargetWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.TargetWorker)
  // optional string worker_identify = 1;
  if (this->worker_identify().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_identify().data(), this->worker_identify().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.TargetWorker.worker_identify");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->worker_identify(), output);
  }

  // optional string node_type = 2;
  if (this->node_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_type().data(), this->node_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.TargetWorker.node_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.TargetWorker)
}

::google::protobuf::uint8* TargetWorker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.TargetWorker)
  // optional string worker_identify = 1;
  if (this->worker_identify().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->worker_identify().data(), this->worker_identify().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.TargetWorker.worker_identify");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->worker_identify(), target);
  }

  // optional string node_type = 2;
  if (this->node_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_type().data(), this->node_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.TargetWorker.node_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.TargetWorker)
  return target;
}

int TargetWorker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.TargetWorker)
  int total_size = 0;

  // optional string worker_identify = 1;
  if (this->worker_identify().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->worker_identify());
  }

  // optional string node_type = 2;
  if (this->node_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetWorker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.TargetWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TargetWorker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetWorker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.TargetWorker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.TargetWorker)
    MergeFrom(*source);
  }
}

void TargetWorker::MergeFrom(const TargetWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.TargetWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.worker_identify().size() > 0) {

    worker_identify_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.worker_identify_);
  }
  if (from.node_type().size() > 0) {

    node_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_type_);
  }
}

void TargetWorker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.TargetWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetWorker::CopyFrom(const TargetWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.TargetWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetWorker::IsInitialized() const {

  return true;
}

void TargetWorker::Swap(TargetWorker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetWorker::InternalSwap(TargetWorker* other) {
  worker_identify_.Swap(&other->worker_identify_);
  node_type_.Swap(&other->node_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TargetWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetWorker_descriptor_;
  metadata.reflection = TargetWorker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetWorker

// optional string worker_identify = 1;
void TargetWorker::clear_worker_identify() {
  worker_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TargetWorker::worker_identify() const {
  // @@protoc_insertion_point(field_get:neb.TargetWorker.worker_identify)
  return worker_identify_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetWorker::set_worker_identify(const ::std::string& value) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TargetWorker.worker_identify)
}
 void TargetWorker::set_worker_identify(const char* value) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TargetWorker.worker_identify)
}
 void TargetWorker::set_worker_identify(const char* value, size_t size) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TargetWorker.worker_identify)
}
 ::std::string* TargetWorker::mutable_worker_identify() {
  
  // @@protoc_insertion_point(field_mutable:neb.TargetWorker.worker_identify)
  return worker_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TargetWorker::release_worker_identify() {
  // @@protoc_insertion_point(field_release:neb.TargetWorker.worker_identify)
  
  return worker_identify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetWorker::set_allocated_worker_identify(::std::string* worker_identify) {
  if (worker_identify != NULL) {
    
  } else {
    
  }
  worker_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_identify);
  // @@protoc_insertion_point(field_set_allocated:neb.TargetWorker.worker_identify)
}

// optional string node_type = 2;
void TargetWorker::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TargetWorker::node_type() const {
  // @@protoc_insertion_point(field_get:neb.TargetWorker.node_type)
  return node_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetWorker::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TargetWorker.node_type)
}
 void TargetWorker::set_node_type(const char* value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TargetWorker.node_type)
}
 void TargetWorker::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TargetWorker.node_type)
}
 ::std::string* TargetWorker::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:neb.TargetWorker.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TargetWorker::release_node_type() {
  // @@protoc_insertion_point(field_release:neb.TargetWorker.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TargetWorker::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:neb.TargetWorker.node_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogLevel::kLogLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogLevel::LogLevel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.LogLevel)
}

void LogLevel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LogLevel::LogLevel(const LogLevel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.LogLevel)
}

void LogLevel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  log_level_ = 0;
}

LogLevel::~LogLevel() {
  // @@protoc_insertion_point(destructor:neb.LogLevel)
  SharedDtor();
}

void LogLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogLevel_descriptor_;
}

const LogLevel& LogLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neb_5fsys_2eproto();
  return *default_instance_;
}

LogLevel* LogLevel::default_instance_ = NULL;

LogLevel* LogLevel::New(::google::protobuf::Arena* arena) const {
  LogLevel* n = new LogLevel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.LogLevel)
  log_level_ = 0;
}

bool LogLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.LogLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 log_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.LogLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.LogLevel)
  return false;
#undef DO_
}

void LogLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.LogLevel)
  // optional int32 log_level = 1;
  if (this->log_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log_level(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.LogLevel)
}

::google::protobuf::uint8* LogLevel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.LogLevel)
  // optional int32 log_level = 1;
  if (this->log_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log_level(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.LogLevel)
  return target;
}

int LogLevel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.LogLevel)
  int total_size = 0;

  // optional int32 log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->log_level());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.LogLevel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LogLevel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LogLevel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.LogLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.LogLevel)
    MergeFrom(*source);
  }
}

void LogLevel::MergeFrom(const LogLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.LogLevel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.log_level() != 0) {
    set_log_level(from.log_level());
  }
}

void LogLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.LogLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogLevel::CopyFrom(const LogLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.LogLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogLevel::IsInitialized() const {

  return true;
}

void LogLevel::Swap(LogLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogLevel::InternalSwap(LogLevel* other) {
  std::swap(log_level_, other->log_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogLevel_descriptor_;
  metadata.reflection = LogLevel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogLevel

// optional int32 log_level = 1;
void LogLevel::clear_log_level() {
  log_level_ = 0;
}
 ::google::protobuf::int32 LogLevel::log_level() const {
  // @@protoc_insertion_point(field_get:neb.LogLevel.log_level)
  return log_level_;
}
 void LogLevel::set_log_level(::google::protobuf::int32 value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:neb.LogLevel.log_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceLog::kNodeIdFieldNumber;
const int TraceLog::kNodeIdentifyFieldNumber;
const int TraceLog::kLogContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceLog::TraceLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.TraceLog)
}

void TraceLog::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TraceLog::TraceLog(const TraceLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.TraceLog)
}

void TraceLog::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  node_id_ = 0u;
  node_identify_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TraceLog::~TraceLog() {
  // @@protoc_insertion_point(destructor:neb.TraceLog)
  SharedDtor();
}

void TraceLog::SharedDtor() {
  node_identify_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TraceLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceLog_descriptor_;
}

const TraceLog& TraceLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_neb_5fsys_2eproto();
  return *default_instance_;
}

TraceLog* TraceLog::default_instance_ = NULL;

TraceLog* TraceLog::New(::google::protobuf::Arena* arena) const {
  TraceLog* n = new TraceLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceLog::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.TraceLog)
  node_id_ = 0u;
  node_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TraceLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.TraceLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node_identify;
        break;
      }

      // optional string node_identify = 2;
      case 2: {
        if (tag == 18) {
         parse_node_identify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_identify()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_identify().data(), this->node_identify().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.TraceLog.node_identify"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_log_content;
        break;
      }

      // optional bytes log_content = 3;
      case 3: {
        if (tag == 26) {
         parse_log_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.TraceLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.TraceLog)
  return false;
#undef DO_
}

void TraceLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.TraceLog)
  // optional uint32 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional string node_identify = 2;
  if (this->node_identify().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_identify().data(), this->node_identify().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.TraceLog.node_identify");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_identify(), output);
  }

  // optional bytes log_content = 3;
  if (this->log_content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->log_content(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.TraceLog)
}

::google::protobuf::uint8* TraceLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.TraceLog)
  // optional uint32 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional string node_identify = 2;
  if (this->node_identify().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_identify().data(), this->node_identify().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.TraceLog.node_identify");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_identify(), target);
  }

  // optional bytes log_content = 3;
  if (this->log_content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->log_content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.TraceLog)
  return target;
}

int TraceLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.TraceLog)
  int total_size = 0;

  // optional uint32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->node_id());
  }

  // optional string node_identify = 2;
  if (this->node_identify().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_identify());
  }

  // optional bytes log_content = 3;
  if (this->log_content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->log_content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.TraceLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TraceLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.TraceLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.TraceLog)
    MergeFrom(*source);
  }
}

void TraceLog::MergeFrom(const TraceLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.TraceLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.node_identify().size() > 0) {

    node_identify_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_identify_);
  }
  if (from.log_content().size() > 0) {

    log_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_content_);
  }
}

void TraceLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.TraceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceLog::CopyFrom(const TraceLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.TraceLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceLog::IsInitialized() const {

  return true;
}

void TraceLog::Swap(TraceLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceLog::InternalSwap(TraceLog* other) {
  std::swap(node_id_, other->node_id_);
  node_identify_.Swap(&other->node_identify_);
  log_content_.Swap(&other->log_content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceLog_descriptor_;
  metadata.reflection = TraceLog_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceLog

// optional uint32 node_id = 1;
void TraceLog::clear_node_id() {
  node_id_ = 0u;
}
 ::google::protobuf::uint32 TraceLog::node_id() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.node_id)
  return node_id_;
}
 void TraceLog::set_node_id(::google::protobuf::uint32 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:neb.TraceLog.node_id)
}

// optional string node_identify = 2;
void TraceLog::clear_node_identify() {
  node_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TraceLog::node_identify() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.node_identify)
  return node_identify_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TraceLog::set_node_identify(const ::std::string& value) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.node_identify)
}
 void TraceLog::set_node_identify(const char* value) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.node_identify)
}
 void TraceLog::set_node_identify(const char* value, size_t size) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.node_identify)
}
 ::std::string* TraceLog::mutable_node_identify() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.node_identify)
  return node_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TraceLog::release_node_identify() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.node_identify)
  
  return node_identify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TraceLog::set_allocated_node_identify(::std::string* node_identify) {
  if (node_identify != NULL) {
    
  } else {
    
  }
  node_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_identify);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.node_identify)
}

// optional bytes log_content = 3;
void TraceLog::clear_log_content() {
  log_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TraceLog::log_content() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.log_content)
  return log_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TraceLog::set_log_content(const ::std::string& value) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.log_content)
}
 void TraceLog::set_log_content(const char* value) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.log_content)
}
 void TraceLog::set_log_content(const void* value, size_t size) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.log_content)
}
 ::std::string* TraceLog::mutable_log_content() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.log_content)
  return log_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TraceLog::release_log_content() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.log_content)
  
  return log_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TraceLog::set_allocated_log_content(::std::string* log_content) {
  if (log_content != NULL) {
    
  } else {
    
  }
  log_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_content);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.log_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

// @@protoc_insertion_point(global_scope)
